# Jingyan Dong
# classify_test.py
# CS251 Project8
# Test naive bayes and knn classifiers

import sys
import data
import classifiers


def main(argv):
    # Reads in a training set and its category labels, possibly as a separate file.
    # Reads a test set and its category labels, possibly as a separate file.

    # usage
    if len(argv) < 3:
        print 'Usage: python %s <train data file> <test data file> <optional train categories> <optional test categories>' % (
        argv[0])
        exit(-1)

    dtrain = data.Data(argv[1])
    dtest = data.Data(argv[2])

    if len(argv) > 4:
        # Reads category labels
        traincatdata = data.Data(argv[3])
        traincats = traincatdata.get_data(headers=[traincatdata.get_headers()[0]])
        testcatdata = data.Data(argv[4])
        testcats = testcatdata.get_data(headers=[testcatdata.get_headers()[0]])
        A = dtrain.get_data(headers=dtrain.get_headers())
        B = dtest.get_data(headers=dtest.get_headers())

    else:
        # assume the categories are the last column
        traincats = dtrain.get_data(headers=[dtrain.get_headers()[-1]])
        testcats = dtest.get_data(headers=[dtest.get_headers()[-1]])
        A = dtrain.get_data(headers=dtrain.get_headers()[:-1])
        B = dtest.get_data(headers=dtest.get_headers()[:-1])

    # create a new NaiveBayes classifier
    nbc = classifiers.NaiveBayes()
    clas = classifiers.Classifier("NaiveBayes")

    # build the classifier using the training data
    nbc.build(A, traincats)

    # use the classifier on the training data
    ctraincats, ctrainlabels = nbc.classify(A)
    ctestcats, ctestlabels = nbc.classify(B)


    # prints out confusion matrices
    print "\nNaiveBayes Results on Training Set: " + argv[1]
    cmtx_train = clas.confusion_matrix(traincats, ctraincats)
    print clas.confusion_matrix_str(cmtx_train)
    print "\nNaiveBayes Results on Test Set: " + argv[2]
    cmtx_test = clas.confusion_matrix(testcats, ctestcats)
    print clas.confusion_matrix_str(cmtx_test)

    # Writes out a new CSV data file with the test set data and the categories as an extra column.
    newCats =  ctestlabels.T.tolist()[0]
    dtest.add_column("cats", "numeric", newCats)
    filename = argv[2][:-4] + "_nb_classified.csv"
    dtest.write(filename)


    # number of exemplars for KNN classifier
    K = 0
    # if category files are given, assume the 6th command line argument is K
    if len(argv) > 5:
        try:
            K = int(argv[5])
            if K < 0 or K > 30:
                print "Please enter an integer between 0 and 30 for KNN cluster number"
                return
        except:
            print "Please enter an integer"
            return

    # if no category files are given, assume the 4th command line argument is K
    if len(argv) == 4:
        try:
            K = int(argv[3])
            if K < 0:
                print "Please enter an integer equal to or bigger than 0."
                return
        except:
            print "Please enter an integer"
            return
    if K == 0:
        print "\nUsing the entire data set"
    else:
        print "\nNumber of exemplars for KNN classifier:", K

    # use all exemplars
    if K == 0:
        knncall = classifiers.KNN()
        knncall.build(A, traincats)
        ctrainall, ctrainalllabels = knncall.classify(A)
        ctestall, ctestalllabels = knncall.classify(B)

        clas = classifiers.Classifier("KNN")
        print "\nKNN Results on Training Set with All Exemplars: " + argv[1]
        cmtx_train = clas.confusion_matrix(traincats, ctrainall)
        print clas.confusion_matrix_str(cmtx_train)
        print "\nKNN Results on Test Set with All Exemplars: "  + argv[2]
        cmtx_test = clas.confusion_matrix(testcats, ctestall)
        print clas.confusion_matrix_str(cmtx_test)

        newCats = ctestlabels.T.tolist()[0]
        dtest.add_column("cats", "numeric", newCats)
        filename = argv[2][:-4] + "_knn_classified.csv"
        dtest.write(filename)

    else:
        knncpart = classifiers.KNN()
        knncpart.build(A, traincats, K)
        ctrainpart, ctrainpartlabels = knncpart.classify(A)
        ctestpart, ctestpartlabels = knncpart.classify(B)

        clas = classifiers.Classifier("KNN")
        print "\nKNN Results on Training Set: " + argv[1]
        cmtx_train = clas.confusion_matrix(traincats, ctrainpart)
        print clas.confusion_matrix_str(cmtx_train)
        print "\nKNN Results on Test Set: " + argv[2]
        cmtx_test = clas.confusion_matrix(testcats, ctestpart)
        print clas.confusion_matrix_str(cmtx_test)

        newCats = ctestlabels.T.tolist()[0]
        dtest.add_column("cats", "numeric", newCats)
        filename = argv[2][:-4] + "_knn_classified.csv"
        dtest.write(filename)

    # use all exemplars for Nearest Neighbor classifier
    if K == 0:
        nncall = classifiers.NN()
        nncall.build(A, traincats)
        ctrainall, ctrainalllabels = nncall.classify(A)
        ctestall, ctestalllabels = nncall.classify(B)

        clas = classifiers.Classifier("NN")
        print "\nNN Results on Training Set with All Exemplars: " + argv[1]
        cmtx_train = clas.confusion_matrix(traincats, ctrainall)
        print clas.confusion_matrix_str(cmtx_train)
        print "\nNN Results on Test Set with All Exemplars: "  + argv[2]
        cmtx_test = clas.confusion_matrix(testcats, ctestall)
        print clas.confusion_matrix_str(cmtx_test)

        newCats = ctestlabels.T.tolist()[0]
        dtest.add_column("cats", "numeric", newCats)
        filename = argv[2][:-4] + "_nn_classified.csv"
        dtest.write(filename)

    else:
        nncpart = classifiers.NN()
        nncpart.build(A, traincats, K)
        ctrainpart, ctrainpartlabels = nncpart.classify(A)
        ctestpart, ctestpartlabels = nncpart.classify(B)

        clas = classifiers.Classifier("NN")
        print "\nNN Results on Training Set: " + argv[1]
        cmtx_train = clas.confusion_matrix(traincats, ctrainpart)
        print clas.confusion_matrix_str(cmtx_train)
        print "\nNN Results on Test Set: " + argv[2]
        cmtx_test = clas.confusion_matrix(testcats, ctestpart)
        print clas.confusion_matrix_str(cmtx_test)

        newCats = ctestlabels.T.tolist()[0]
        dtest.add_column("cats", "numeric", newCats)
        filename = argv[2][:-4] + "_nn_classified.csv"
        dtest.write(filename)


if __name__ == "__main__":
    main(sys.argv)
